//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSURL;

@interface GTRepository : NSObject
{
    struct git_repository *_git_repository;
}

+ (id)defaultEmail;
+ (id)defaultUserName;
+ (id)cloneFromURL:(id)arg1 toWorkingDirectory:(id)arg2 options:(id)arg3 error:(id *)arg4 transferProgressBlock:(CDUnknownBlockType)arg5;
+ (id)repositoryWithURL:(id)arg1 error:(id *)arg2;
+ (id)initializeEmptyRepositoryAtFileURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
@property(readonly, nonatomic) struct git_repository *git_repository; // @synthesize git_repository=_git_repository;
- (BOOL)enumerateNotesWithReferenceName:(id)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (BOOL)removeNoteFromObject:(id)arg1 referenceName:(id)arg2 author:(id)arg3 committer:(id)arg4 error:(id *)arg5;
- (id)createNote:(id)arg1 target:(id)arg2 referenceName:(id)arg3 author:(id)arg4 committer:(id)arg5 overwriteIfExists:(BOOL)arg6 error:(id *)arg7;
- (BOOL)cleanupStateWithError:(id *)arg1;
- (BOOL)calculateState:(long long *)arg1 withError:(id *)arg2;
- (id)enumeratorForUniqueCommitsFromOID:(id)arg1 relativeToOID:(id)arg2 error:(id *)arg3;
- (BOOL)calculateAhead:(unsigned long long *)arg1 behind:(unsigned long long *)arg2 ofOID:(id)arg3 relativeToOID:(id)arg4 error:(id *)arg5;
- (id)filterListWithPath:(id)arg1 blob:(id)arg2 mode:(long long)arg3 options:(long long)arg4 success:(char *)arg5 error:(id *)arg6;
- (void)flushAttributesCache;
- (BOOL)checkoutIndex:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (BOOL)checkoutTree:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (BOOL)checkoutReference:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (BOOL)checkoutCommit:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (BOOL)performCheckout:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (BOOL)moveHEADToCommit:(id)arg1 error:(id *)arg2;
- (BOOL)moveHEADToReference:(id)arg1 error:(id *)arg2;
- (id)createTagNamed:(id)arg1 target:(id)arg2 tagger:(id)arg3 message:(id)arg4 error:(id *)arg5;
- (id)OIDByCreatingTagNamed:(id)arg1 target:(id)arg2 tagger:(id)arg3 message:(id)arg4 error:(id *)arg5;
- (BOOL)createLightweightTagNamed:(id)arg1 target:(id)arg2 error:(id *)arg3;
- (id)userSignatureForNow;
- (id)submoduleWithName:(id)arg1 error:(id *)arg2;
- (void)enumerateSubmodulesRecursively:(BOOL)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)indexWithError:(id *)arg1;
- (id)configurationWithError:(id *)arg1;
- (id)objectDatabaseWithError:(id *)arg1;
- (id)mergeBaseBetweenFirstOID:(id)arg1 secondOID:(id)arg2 error:(id *)arg3;
- (id)preparedMessageWithError:(id *)arg1;
@property(readonly, nonatomic, getter=isHEADUnborn) BOOL HEADUnborn;
@property(readonly, nonatomic, getter=isHEADDetached) BOOL HEADDetached;
@property(readonly, nonatomic, getter=isBare) BOOL bare;
@property(readonly, nonatomic) NSURL *gitDirectoryURL;
@property(readonly, nonatomic) NSURL *fileURL;
- (id)referenceNamesWithError:(id *)arg1;
- (id)localCommitsRelativeToRemoteBranch:(id)arg1 error:(id *)arg2;
- (id)currentBranchWithError:(id *)arg1;
@property(readonly, nonatomic, getter=isEmpty) BOOL empty;
- (id)createBranchNamed:(id)arg1 fromOID:(id)arg2 message:(id)arg3 error:(id *)arg4;
- (id)createReferenceNamed:(id)arg1 fromReference:(id)arg2 message:(id)arg3 error:(id *)arg4;
- (id)createReferenceNamed:(id)arg1 fromOID:(id)arg2 message:(id)arg3 error:(id *)arg4;
- (unsigned long long)numberOfCommitsInCurrentBranch:(id *)arg1;
- (id)allTagsWithError:(id *)arg1;
- (BOOL)enumerateTags:(id *)arg1 block:(CDUnknownBlockType)arg2;
- (BOOL)deleteRemoteNamed:(id)arg1 error:(id *)arg2;
- (id)remoteNamesWithError:(id *)arg1;
- (id)branches:(id *)arg1;
- (id)branchesWithPrefix:(id)arg1 error:(id *)arg2;
- (id)remoteBranchesWithError:(id *)arg1;
- (id)localBranchesWithError:(id *)arg1;
- (BOOL)enumerateBranchesWithType:(long long)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)headReferenceWithError:(id *)arg1;
- (id)lookUpBranchWithName:(id)arg1 type:(long long)arg2 success:(char *)arg3 error:(id *)arg4;
- (id)lookUpObjectByRevParse:(id)arg1 error:(id *)arg2;
- (id)lookUpObjectBySHA:(id)arg1 error:(id *)arg2;
- (id)lookUpObjectBySHA:(id)arg1 objectType:(int)arg2 error:(id *)arg3;
- (id)lookUpObjectByOID:(id)arg1 error:(id *)arg2;
- (id)lookUpObjectByOID:(id)arg1 objectType:(int)arg2 error:(id *)arg3;
- (id)lookUpObjectByGitOid:(const struct git_oid *)arg1 error:(id *)arg2;
- (id)lookUpObjectByGitOid:(const struct git_oid *)arg1 objectType:(int)arg2 error:(id *)arg3;
- (id)initWithURL:(id)arg1 flags:(long long)arg2 ceilingDirs:(id)arg3 error:(id *)arg4;
- (id)initWithURL:(id)arg1 error:(id *)arg2;
- (id)initWithGitRepository:(struct git_repository *)arg1;
- (id)init;
- (void)dealloc;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)attributeWithName:(id)arg1 path:(id)arg2;
- (BOOL)analyzeMerge:(long long *)arg1 fromBranch:(id)arg2 error:(id *)arg3;
- (BOOL)annotatedCommit:(struct git_annotated_commit **)arg1 fromCommit:(id)arg2 error:(id *)arg3;
- (BOOL)mergeBranchIntoCurrentBranch:(id)arg1 withError:(id *)arg2;
- (id)mergeHeadEntriesWithError:(id *)arg1;
- (BOOL)enumerateMergeHeadEntriesWithError:(id *)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (long long)shouldIgnoreFileURL:(id)arg1 error:(id *)arg2;
- (BOOL)shouldFileBeIgnored:(id)arg1 success:(char *)arg2 error:(id *)arg3;
- (long long)statusForFile:(id)arg1 success:(char *)arg2 error:(id *)arg3;
@property(readonly, nonatomic, getter=isWorkingDirectoryClean) BOOL workingDirectoryClean;
- (BOOL)enumerateFileStatusWithOptions:(id)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (BOOL)pullBranch:(id)arg1 fromRemote:(id)arg2 withOptions:(id)arg3 error:(id *)arg4 progress:(CDUnknownBlockType)arg5;
- (BOOL)resetPathspecs:(id)arg1 toCommit:(id)arg2 error:(id *)arg3;
- (BOOL)resetToCommit:(id)arg1 resetType:(long long)arg2 error:(id *)arg3;
- (BOOL)pushRefspecs:(id)arg1 toRemote:(id)arg2 withOptions:(id)arg3 error:(id *)arg4 progress:(CDUnknownBlockType)arg5;
- (BOOL)deleteBranch:(id)arg1 fromRemote:(id)arg2 withOptions:(id)arg3 error:(id *)arg4;
- (BOOL)pushNotes:(id)arg1 toRemote:(id)arg2 withOptions:(id)arg3 error:(id *)arg4 progress:(CDUnknownBlockType)arg5;
- (BOOL)pushBranches:(id)arg1 toRemote:(id)arg2 withOptions:(id)arg3 error:(id *)arg4 progress:(CDUnknownBlockType)arg5;
- (BOOL)pushBranch:(id)arg1 toRemote:(id)arg2 withOptions:(id)arg3 error:(id *)arg4 progress:(CDUnknownBlockType)arg5;
- (id)fetchHeadEntriesWithError:(id *)arg1;
- (BOOL)enumerateFetchHeadEntriesWithError:(id *)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (BOOL)fetchRemote:(id)arg1 withOptions:(id)arg2 error:(id *)arg3 progress:(CDUnknownBlockType)arg4;
- (id)lookUpReferenceWithName:(id)arg1 error:(id *)arg2;
- (id)createCommitWithTree:(id)arg1 message:(id)arg2 author:(id)arg3 committer:(id)arg4 parents:(id)arg5 updatingReferenceNamed:(id)arg6 error:(id *)arg7;
- (id)createCommitWithTree:(id)arg1 message:(id)arg2 parents:(id)arg3 updatingReferenceNamed:(id)arg4 error:(id *)arg5;
- (BOOL)dropStashAtIndex:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)popStashAtIndex:(unsigned long long)arg1 flags:(long long)arg2 checkoutOptions:(id)arg3 error:(id *)arg4 progressBlock:(CDUnknownBlockType)arg5;
- (BOOL)applyStashAtIndex:(unsigned long long)arg1 flags:(long long)arg2 checkoutOptions:(id)arg3 error:(id *)arg4 progressBlock:(CDUnknownBlockType)arg5;
- (void)enumerateStashesUsingBlock:(CDUnknownBlockType)arg1;
- (id)stashChangesWithMessage:(id)arg1 flags:(long long)arg2 error:(id *)arg3;
- (id)blameWithFile:(id)arg1 options:(id)arg2 error:(id *)arg3;

@end

